# This file is part of FES library.
#
# FES is free software: you can redistribute it and/or modify
# it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# FES is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU LESSER GENERAL PUBLIC LICENSE for more details.
#
# You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
# along with FES.  If not, see <http://www.gnu.org/licenses/>.
cmake_minimum_required(VERSION 2.8.12)

project(fes)

include(CheckFunctionExists)
include(CheckCXXSourceRuns)

if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_CURRENT_BINARY_DIR}")
  message(FATAL_ERROR "The build directory must be different from the \
        root directory of this software.")
endif()

# Options
option(BUILD_DOC "Build documentation" OFF)
option(BUILD_PYTHON "Build python extension" OFF)

if (POLICY CMP0042)
  cmake_policy(SET CMP0042 NEW)
endif ()

cmake_policy(SET CMP0048 NEW)
if (BUILD_PYTHON)
  project(interp LANGUAGES C CXX)
else()
  project(interp LANGUAGES C)
endif()

if (POLICY CMP0063)
  cmake_policy(SET CMP0063 NEW)
endif ()

if (POLICY CMP0074)
  cmake_policy(SET CMP0074 NEW) # CMake 3.12
endif ()

if (POLICY CMP0077)
  cmake_policy(SET CMP0077 NEW)
endif ()

# CMake module search path
set(
  CMAKE_MODULE_PATH
  "${CMAKE_CURRENT_SOURCE_DIR}/cmake;"
  "${CMAKE_MODULE_PATH}"
)

# By default, build type is set to release, with debugging information.
if (NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE RELWITHDEBINFO)
endif()
message("-- Build type: ${CMAKE_BUILD_TYPE}")

if (BUILD_PYTHON)
  # The library must be built using C++14 compiler.
  set(CMAKE_CXX_STANDARD 14)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
  set(CMAKE_CXX_EXTENSIONS OFF)
  set(CMAKE_MACOSX_RPATH 1)

  include(CheckCXXCompilerFlag)
  check_cxx_compiler_flag("-std=c++14" HAS_CPP14_FLAG)
  if(NOT HAS_CPP14_FLAG)
    message(FATAL_ERROR "Unsupported compiler -- requires C++14 support!")
  endif()

  macro(CHECK_CXX_COMPILER_AND_LINKER_FLAGS _RESULT _CXX_FLAGS _LINKER_FLAGS)
    set(CMAKE_REQUIRED_FLAGS ${_CXX_FLAGS})
    set(CMAKE_REQUIRED_LIBRARIES ${_LINKER_FLAGS})
    set(CMAKE_REQUIRED_QUIET TRUE)
    check_cxx_source_runs("int main(int argc, char **argv) { return 0; }" ${_RESULT})
    set(CMAKE_REQUIRED_FLAGS "")
    set(CMAKE_REQUIRED_LIBRARIES "")
  endmacro()

  # Always use libc++ on Clang
  if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    CHECK_CXX_COMPILER_AND_LINKER_FLAGS(HAS_LIBCPP "-stdlib=libc++" "-stdlib=libc++")
    if (HAS_LIBCPP)
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
      set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++")
      set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -stdlib=libc++")
      CHECK_CXX_COMPILER_AND_LINKER_FLAGS(HAS_LIBCPPABI "-stdlib=libc++" "-stdlib=libc++ -lc++abi")
      if(HAS_LIBCPPABI)
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lc++abi")
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -lc++abi")
      endif()
    endif()
  endif()
endif()

# set(LIB_VERSION "${LIB_VERSION_MAJOR}.${LIB_VERSION_MINOR}.${LIB_VERSION_PATCH}")

if (${CMAKE_BUILD_TYPE} MATCHES "Debug")
  set(CMAKE_DEBUG_POSTFIX "-d")
endif ()

if(NOT WIN32)
  if(NOT CMAKE_CXX_FLAGS MATCHES "-Wall$")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
  endif()
  if(NOT CMAKE_CXX_COMPILER MATCHES "icpc$" AND NOT CMAKE_CXX_FLAGS MATCHES "-Wpedantic$")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wpedantic")
  endif()
endif()

CHECK_FUNCTION_EXISTS(pow POW_FUNCTION_EXISTS)
if(NOT POW_FUNCTION_EXISTS)
  unset(POW_FUNCTION_EXISTS)
  list(APPEND CMAKE_REQUIRED_LIBRARIES m)
  CHECK_FUNCTION_EXISTS(pow POW_FUNCTION_EXISTS)
  if(NOT POW_FUNCTION_EXISTS)
    message(FATAL_ERROR "Failed making the pow() function available")
  endif()
endif()

enable_testing()

# API documentation
# if (BUILD_DOC)
#   add_subdirectory(docs)
# endif()

# NetCDF
find_package(NetCDF 4.1.1 REQUIRED)
include_directories(${NETCDF_INCLUDE_DIRS})

# uthash
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/uthash/include)

include_directories(include)
install(FILES include/fes.h DESTINATION include)

add_subdirectory(src)
add_subdirectory(test)
add_subdirectory(examples)

if (BUILD_PYTHON)
  # Python
  find_package(PythonInterp REQUIRED)
  execute_process(
      COMMAND
      ${PYTHON_EXECUTABLE} -c [=[import os
import sysconfig
import sys
sys.stdout.write(os.path.dirname(sysconfig.get_config_h_filename()))
]=] OUTPUT_VARIABLE PYTHON_INCLUDE_DIR)
  execute_process ( 
   COMMAND ${PYTHON_EXECUTABLE} -c [=[import site
import sys
sys.stdout.write(site.getsitepackages()[-1])
]=] OUTPUT_VARIABLE PYTHON_SITE_DIR)
  find_package(PythonLibs REQUIRED)
  add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/third_party/pybind11)
  add_subdirectory(python)
endif()
